apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgresql-cluster
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: crystalshards
spec:
  instances: 3  # High availability with 3 instances
  
  # PostgreSQL configuration
  postgresql:
    parameters:
      max_connections: "200"
      shared_buffers: "256MB"
      effective_cache_size: "1GB"
      maintenance_work_mem: "64MB"
      checkpoint_completion_target: "0.9"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "4MB"
      min_wal_size: "1GB"
      max_wal_size: "4GB"
      max_worker_processes: "8"
      max_parallel_workers_per_gather: "2"
      max_parallel_workers: "8"
      max_parallel_maintenance_workers: "2"
      # Enable logging for debugging
      log_statement: "all"
      log_duration: "on"
      log_min_duration_statement: "1000"
    
    # Extensions needed for search and JSON operations
    shared_preload_libraries:
      - "pg_stat_statements"
    
  # Resource limits for cost optimization
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  # Storage configuration
  storage:
    size: "20Gi"
    storageClass: "standard"
  
  # Backup configuration
  backup:
    retentionPolicy: "7d"
    barmanObjectStore:
      destinationPath: "gs://crystalshards-backups/postgresql"
      s3Credentials:
        accessKeyId:
          name: backup-credentials
          key: ACCESS_KEY_ID
        secretAccessKey:
          name: backup-credentials
          key: SECRET_ACCESS_KEY
      wal:
        retention: "7d"
        compression: "gzip"
      data:
        compression: "gzip"
  
  # Monitoring
  monitoring:
    enabled: true
    
  # Bootstrap with initial databases
  bootstrap:
    initdb:
      database: crystalshards
      owner: crystalshards
      secret:
        name: postgresql-credentials
      postInitSQL:
        - "CREATE DATABASE crystaldocs OWNER crystalshards;"
        - "CREATE DATABASE crystalgigs OWNER crystalshards;"
        - "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
        - "CREATE EXTENSION IF NOT EXISTS btree_gin;"
        - "CREATE EXTENSION IF NOT EXISTS unaccent;"

---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-credentials
  namespace: infrastructure
type: Opaque
data:
  username: Y3J5c3RhbHNoYXJkcw==  # crystalshards (base64)
  password: Y3J5c3RhbF9kZXZfcGFzcw==  # crystal_dev_pass (base64)

---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: infrastructure
type: Opaque
data:
  ACCESS_KEY_ID: ""  # To be filled with actual credentials
  SECRET_ACCESS_KEY: ""  # To be filled with actual credentials

---
# Service for applications to connect to PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: crystalshards
spec:
  selector:
    cnpg.io/cluster: postgresql-cluster
    cnpg.io/podRole: instance
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
# NetworkPolicy to allow access from application namespaces
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgresql-access
  namespace: infrastructure
spec:
  podSelector:
    matchLabels:
      cnpg.io/cluster: postgresql-cluster
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: crystalshards
    - namespaceSelector:
        matchLabels:
          name: crystaldocs
    - namespaceSelector:
        matchLabels:
          name: crystalgigs
    - namespaceSelector:
        matchLabels:
          name: claude
    ports:
    - protocol: TCP
      port: 5432