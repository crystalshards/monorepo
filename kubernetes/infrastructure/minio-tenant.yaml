apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio-tenant
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: crystalshards
spec:
  # Image configuration
  image: minio/minio:RELEASE.2023-11-20T22-40-07Z
  imagePullPolicy: IfNotPresent
  
  # Tenant configuration
  credsSecret:
    name: minio-credentials
  
  # Pool configuration for cost optimization
  pools:
  - servers: 2
    name: pool-0
    volumesPerServer: 2
    
    # Resource limits
    resources:
      requests:
        cpu: "100m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1Gi"
    
    # Storage configuration
    volumeClaimTemplate:
      metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "10Gi"
        storageClassName: "standard"
    
    # Security context
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

  # MinIO configuration
  configuration:
    name: minio-config
  
  # Monitoring
  prometheusOperator: true
  
  # Logging
  logging:
    anonymous: false
    json: true
    quiet: false

  # Features
  features:
    domains:
      minio:
      - "minio.infrastructure.svc.cluster.local"
    bucketDNS: false

  # Service account
  serviceAccountName: minio-tenant-sa

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: infrastructure
type: Opaque
data:
  config.env: |
    export MINIO_ROOT_USER="minioadmin"
    export MINIO_ROOT_PASSWORD="crystalshards-minio-2023"
    export MINIO_STORAGE_CLASS_STANDARD="EC:2"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
  namespace: infrastructure
data:
  config.env: |
    # MinIO configuration
    MINIO_API_CORS_ALLOW_ORIGIN=*
    MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    MINIO_PROMETHEUS_AUTH_TYPE=public
    MINIO_PROMETHEUS_URL=http://prometheus-operator-prometheus.monitoring.svc.cluster.local:9090

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-tenant-sa
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: crystalshards

---
# Service for MinIO API
apiVersion: v1
kind: Service
metadata:
  name: minio-service
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: crystalshards
spec:
  selector:
    v1.min.io/tenant: minio-tenant
  ports:
  - name: minio-api
    port: 9000
    targetPort: 9000
    protocol: TCP
  - name: minio-console
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# NetworkPolicy for MinIO access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: minio-access
  namespace: infrastructure
spec:
  podSelector:
    matchLabels:
      v1.min.io/tenant: minio-tenant
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: crystalshards
    - namespaceSelector:
        matchLabels:
          name: crystaldocs
    - namespaceSelector:
        matchLabels:
          name: crystalgigs
    - namespaceSelector:
        matchLabels:
          name: claude
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9000
    - protocol: TCP
      port: 9090

---
# Job to create initial buckets
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-bucket-setup
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: minio-setup
    app.kubernetes.io/part-of: crystalshards
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mc-setup
        image: minio/mc:RELEASE.2023-11-20T16-30-59Z
        command:
        - /bin/bash
        - -c
        args:
        - |
          # Configure MinIO client
          mc alias set minio http://minio-service.infrastructure.svc.cluster.local:9000 minioadmin crystalshards-minio-2023

          # Create buckets for different applications
          mc mb minio/crystalshards-registry --ignore-existing
          mc mb minio/crystaldocs-assets --ignore-existing  
          mc mb minio/crystalgigs-uploads --ignore-existing
          mc mb minio/system-backups --ignore-existing

          # Set bucket policies
          mc policy set public minio/crystaldocs-assets
          mc policy set private minio/crystalshards-registry
          mc policy set private minio/crystalgigs-uploads
          mc policy set private minio/system-backups

          # Configure lifecycle policies
          mc ilm add --expiry-days 30 minio/system-backups
          mc ilm add --expiry-days 90 minio/crystalgigs-uploads

          echo "MinIO bucket setup completed successfully"
        env:
        - name: MC_HOST_minio
          value: "http://minioadmin:crystalshards-minio-2023@minio-service.infrastructure.svc.cluster.local:9000"
      
---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: minio-metrics
  namespace: infrastructure
  labels:
    app.kubernetes.io/name: minio
    app.kubernetes.io/part-of: crystalshards
spec:
  selector:
    matchLabels:
      v1.min.io/tenant: minio-tenant
  endpoints:
  - port: minio-api
    path: /minio/v2/metrics/cluster
    interval: 30s